{"version":3,"sources":["webpack:///./src/templates/post.jsx"],"names":["Hero","props","theme","colors","greyLight","Headline","grey","PostWrapper","Wrapper","withComponent","Post","data","prismicPost","posts","location","categories","category","map","c","document","name","customSEO","title","text","website","titleAlt","pathname","desc","description","node","article","date","id","skipNavId","allSlices","body","style","marginTop","nodes"],"mappings":"yLAQMA,EAAI,gEACY,SAACC,GAAD,OAAWA,EAAMC,MAAMC,OAAOC,YAD1C,0CAMJC,EAAQ,2NAGH,SAACJ,GAAD,OAAWA,EAAMC,MAAMC,OAAOG,OAH3B,+DAWRC,EAAcC,IAAQC,cAAc,OAAtB,sBAmCLC,UAjCF,SAAC,GAAgD,IAAD,IAA7CC,KAAQC,EAAqC,EAArCA,YAAaC,EAAwB,EAAxBA,MAASC,EAAe,EAAfA,SACpCH,EAASC,EAATD,KACJI,GAAa,EAIjB,OAHIJ,EAAKI,WAAW,GAAGC,WACrBD,EAAaJ,EAAKI,WAAWE,KAAI,SAACC,GAAD,OAAOA,EAAEF,SAASG,SAAS,GAAGR,KAAKS,SAGpE,YAAC,IAAD,CAAQC,WAAS,GACf,YAAC,IAAD,CACEC,MAAUX,EAAKW,MAAMC,KAAhB,MAA0BC,IAAQC,SACvCC,SAAUZ,EAASY,SACnBC,KAAMhB,EAAKiB,YACXC,KAAMjB,EACNkB,SAAO,IAET,YAAC,IAAD,MACA,YAAC9B,EAAD,KACE,YAAC,IAAD,KACE,YAACK,EAAD,KACGM,EAAKoB,KADR,MACiBhB,GAAc,YAAC,IAAD,CAAYA,WAAYA,KAEvD,sBAAKJ,EAAKW,MAAMC,QAGpB,YAAChB,EAAD,CAAayB,GAAIR,IAAQS,WACvB,YAAC,IAAD,CAAWC,UAAWvB,EAAKwB,OAC3B,YAAC,IAAD,CAAOC,MAAO,CAAEC,UAAW,SAA3B,gBACA,YAAC,IAAD,CAASxB,MAAOA,EAAMyB","file":"component---src-templates-post-jsx-2ada12cecafd3329dd24.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\nimport styled from '@emotion/styled'\nimport { Layout, Listing, Wrapper, SliceZone, Title, SEO, Header } from '../components'\nimport Categories from '../components/Listing/Categories'\nimport website from '../../config/website'\n\nconst Hero = styled.header`\n  background-color: ${(props) => props.theme.colors.greyLight};\n  padding-top: 1rem;\n  padding-bottom: 4rem;\n`\n\nconst Headline = styled.p`\n  font-family: 'Source Sans Pro', -apple-system, 'BlinkMacSystemFont', 'Segoe UI', 'Roboto', 'Helvetica', 'Arial',\n    sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';\n  color: ${(props) => props.theme.colors.grey};\n  font-size: 1.25rem;\n  a {\n    font-style: normal;\n    font-weight: normal;\n  }\n`\n\nconst PostWrapper = Wrapper.withComponent('main')\n\nconst Post = ({ data: { prismicPost, posts }, location }) => {\n  const { data } = prismicPost\n  let categories = false\n  if (data.categories[0].category) {\n    categories = data.categories.map((c) => c.category.document[0].data.name)\n  }\n  return (\n    <Layout customSEO>\n      <SEO\n        title={`${data.title.text} | ${website.titleAlt}`}\n        pathname={location.pathname}\n        desc={data.description}\n        node={prismicPost}\n        article\n      />\n      <Header />\n      <Hero>\n        <Wrapper>\n          <Headline>\n            {data.date} â€” {categories && <Categories categories={categories} />}\n          </Headline>\n          <h1>{data.title.text}</h1>\n        </Wrapper>\n      </Hero>\n      <PostWrapper id={website.skipNavId}>\n        <SliceZone allSlices={data.body} />\n        <Title style={{ marginTop: '4rem' }}>Recent posts</Title>\n        <Listing posts={posts.nodes} />\n      </PostWrapper>\n    </Layout>\n  )\n}\n\nexport default Post\n\nPost.propTypes = {\n  data: PropTypes.shape({\n    prismicPost: PropTypes.object.isRequired,\n    posts: PropTypes.shape({\n      nodes: PropTypes.array.isRequired,\n    }),\n  }).isRequired,\n  location: PropTypes.object.isRequired,\n}\n\n// The typenames come from the slice names\n// If this doesn't work for you query for __typename in body {} and GraphiQL will show them to you\n\nexport const pageQuery = graphql`\n  query PostBySlug($uid: String!) {\n    prismicPost(uid: { eq: $uid }) {\n      uid\n      first_publication_date\n      last_publication_date\n      data {\n        title {\n          text\n        }\n        description\n        date(formatString: \"DD.MM.YYYY\")\n        categories {\n          category {\n            document {\n              data {\n                name\n              }\n            }\n          }\n        }\n        body {\n          ... on PrismicPostBodyText {\n            slice_type\n            id\n            primary {\n              text {\n                html\n              }\n            }\n          }\n          ... on PrismicPostBodyCodeBlock {\n            slice_type\n            id\n            primary {\n              code_block {\n                html\n              }\n            }\n          }\n          ... on PrismicPostBodyQuote {\n            slice_type\n            id\n            primary {\n              quote {\n                html\n                text\n              }\n            }\n          }\n          ... on PrismicPostBodyImage {\n            slice_type\n            id\n            primary {\n              image {\n                localFile {\n                  childImageSharp {\n                    fluid(maxWidth: 1200, quality: 90) {\n                      ...GatsbyImageSharpFluid_withWebp\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    posts: allPrismicPost(limit: 2, sort: { fields: [data___date], order: DESC }, filter: { uid: { ne: $uid } }) {\n      nodes {\n        uid\n        data {\n          title {\n            text\n          }\n          date(formatString: \"DD.MM.YYYY\")\n          categories {\n            category {\n              document {\n                data {\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}